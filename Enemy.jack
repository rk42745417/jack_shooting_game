class Enemy{
    field int size,speed,health,maxHealth,maxY;//max_y is the detection line
    field Coordinate coordinate;//x,y is left up
    constructor Enemy new(int _x,int _y,int _size,int _speed,int _health,int _maxHealth, int _maxY){
        let coordinate = Coordinate.new(_x,_y);
        let size=_size;
        let speed=_speed;
        let health=_health;
        let maxHealth=_maxHealth;
        let maxY=_maxY;
        do draw();
        return this;
    }
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    method void draw(){
        var int left,right,up,down,part;
        let left=coordinate.getX();
        let up=coordinate.getY();
        let right=left+size-1;
        let down=up+size-1;
        do Screen.setColor(true);
        do Screen.drawLine(left,up,right,up);
        do Screen.drawLine(left,up,left,down);
        do Screen.drawLine(left,down,right,down);
        do Screen.drawLine(right,up,right,down);
        let part=left+size*(health/maxHealth)-1;
        do Screen.drawRectangle(left,up,part,down);
        return;
    }
    method void erase(){
        var int left,right,up,down;
        let left=coordinate.getX();
        let up=coordinate.getY();
        let right=left+size-1;
        let down=up+size-1;
        do Screen.setColor(false);
        do Screen.drawRectangle(left,up,left+right,down);
        return;
    }
    method void move(){
        var int yn;
        let yn=coordinate.getY()+speed;
        do erase();
        if(~((yn+size)<maxY)){
            do coordinate.setY(yn);
            do draw();
        }
        else{//player health -1;
            do dispose();
        }
        return;
    }
    method void crash(){
        var int newHealth;
        let newHealth=health-1;
        do erase();
        if(~(newHealth>0)){
            let health=newHealth;
            do draw();
        }
        else{
            do dispose();
        }
        return;
    }
    method boolean isCrash(Bullet bullet){
        var int r2,down,left,right,up,bul_x,bul_y,bul_left,bul_right,dis_c_down,dis_c_leftdown,dis_c_rightdown;
        //dis is squared
        let r2=bullet.getRadius()*bullet.getRadius();
        let left=coordinate.getX();
        let up=coordinate.getY();
        let right=left+size-1;
        let down=up+size-1;
        let bul_x=bullet.getX();
        let bul_y=bullet.getY();
        let dis_c_down=(bul_y-down) * (bul_y-down);
        let dis_c_leftdown=(bul_x-left) * (bul_x-left) + (bul_y-down) * (bul_y-down);
        let dis_c_rightdown=(bul_x-right) * (bul_x-left) + (bul_y-down) * (bul_x-down);
        if(( ~( (dis_c_leftdown > r2) & (dis_c_rightdown > r2) ) ) |
           ( ( ~(dis_c_down > r2) ) & ( ~( (left>bul_right) | (right<bul_left) ) ) )){
            return true;
        }
        else{
            return false;
        }
    }
    method int getX(){
        return coordinate.getX();
    }
    method int getY(){
        return coordinate.getY();
    }
    method int getSize(){
        return health;
    }
    method int getSpeed(){
        return speed;
    }
    method int getHealth(){
        return health;
    }
    method int getMaxhealth(){
        return maxHealth;
    }
    method int getMaxy(){
        return maxY;
    }
}