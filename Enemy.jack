class Enemy{
    field int size,speed,health,maxHealth,maxY;//max_y is the detection line
    field Coordinate coordinate;//x,y is left up
    constructor Enemy new(int _x,int _y,int _size,int _speed,int _health,int _maxHealth, int _maxY){
        let coordinate = Coordinate.new(_x,_y);
        let size=_size;
        let speed=_speed;
        let health=_health;
        let maxHealth=_maxHealth;
        let maxY=_maxY;
        return this;
    }
    method void dispose() {
        do coordinate.dispose();
        do Memory.deAlloc(this);
        return;
    }
    method void draw(){
        var int left,right,up,down,part;
        let left=coordinate.getX();
        let up=coordinate.getY();
        let right=left+size-1;
        let down=up+size-1;
        let part=left+size*health/maxHealth-1;
        do Screen.setColor(true);
        do Screen.drawRectangle(left,up,part,down);
        do Screen.drawLine(left,up,right,up);
        do Screen.drawLine(left,up,left,down);
        do Screen.drawLine(left,down,right,down);
        do Screen.drawLine(right,up,right,down);
        
        return;
    }
    method void erase(){
        var int left,right,up,down;
        let left=coordinate.getX();
        let up=coordinate.getY();
        let right=left+size-1;
        let down=up+size-1;
        do Screen.setColor(false);
        do Screen.drawRectangle(left,up,right,down);
        return;
    }
    //return 0 for nothing; 1 for drop to dection line; 2 for crash and alive; 3 for crash and died 
    method int judge(Bullet bullet){
        var int yn;
        var boolean crashed;
        let yn=coordinate.getY();
        if((yn+size)>maxY){
            return 1;
        }
        else{
            let crashed = isCrash(bullet);
            if(crashed){
                return crash();
            }
            else{
                return 0;
            }
        }
    }
    method void move(){
        var int yn;
        do erase();
        let yn=coordinate.getY()+speed;
        do coordinate.setY(yn);
        do draw();
        return;
    }
    method int crash(){
        var int newHealth;
        let newHealth=health-1;
        if(newHealth>0){
            let health=newHealth;
            return 2;
        }
        else{
            return 3;
        }
    }
    method boolean isCrash(Bullet bullet){
        var int r,down,left,right,up,bul_x,bul_y,bul_left,bul_right,dis_c_down;
        let left=coordinate.getX();
        let up=coordinate.getY();
        let right=left+size-1;
        let down=up+size-1;
        let r=bullet.getRadius();
        let bul_x=bullet.getX();
        let bul_y=bullet.getY();
        let bul_left=bul_x-r;
        let bul_right=bul_x+r;
        let dis_c_down= bul_y-r-down;
        if( (~(dis_c_down>0)) & (~( (left>bul_right) | (right<bul_left) )) ){
            return true;
        }
        else{
            return false;
        }
        
    }
    method int getX(){
        return coordinate.getX();
    }
    method int getY(){
        return coordinate.getY();
    }
    method int getSize(){
        return health;
    }
    method int getSpeed(){
        return speed;
    }
    method int getHealth(){
        return health;
    }
    method int getMaxHealth(){
        return maxHealth;
    }
    method int getMaxY(){
        return maxY;
    }
}
