/*
The Background (Lines, etc) of the game.

constructor new(int Ax, int Ay, int Aheight, int Awidth): declare a Background with the left-top point (Ax, Ay) and height Aheight and width Awidth.
method void draw(): Draw the background on the screen.
*/
class Background{
    field int x, y;
    field int width, height;
    field int line; // The y coordinate of the detection line.
    field EnemyList head,tail;
    field Rand rand;
    field int dhealth,dscore;
    field Array enemies;
    field int enemiesSize;
    constructor Background new(int Ax, int Ay, int Aheight, int Awidth) {
        let x = Ax;
        let y = Ay;
        let height = Aheight;
        let width = Awidth;
        let line = y + height - 1 - (height / 6); // The line is at the 1/6 height from bottom.
        return this;
    }
    /* In length */
    method int getLineHeight() {
        return line - y;
    }
    method void draw() {
        var int newX, newY;

        do Screen.setColor(true);
        let newX = x + width - 1;
        let newY = y + height - 1;

        do Screen.drawLine(x, y, x, newY); // The left border
        do Screen.drawLine(x, y, newX, y); // The top border
        do Screen.drawLine(x, newY, newX, newY); // The bottom border
        do Screen.drawLine(newX, y, newX, newY); // The right border
        do Screen.drawLine(x, line, newX, line); // The detection line
        return;
    }
    method void transfer() {
        var Array tmp;
        var int index, newIndex;
        var Enemy enemyTmp;
        var int newEnemyCounter;
        let index = 0;
        while(index < enemiesSize) {
            let enemyTmp = enemies[index];
            if(~(enemyTmp=null)) {
                let newEnemyCounter = newEnemyCounter + 1;
            }
            let index = index + 1;
        }
        let index = 0;
        let tmp = enemies;
        let newIndex = 0;
        if(newEnemyCounter > 0) {
            let enemies = Array.new(newEnemyCounter);
            let index = 0;
            while(index < enemiesSize) {
                let enemyTmp = tmp[index];
                let index = index + 1;
                if(~(enemyTmp = null)) {
                    let enemies[newIndex] = Enemy.new(enemyTmp.getX(),enemyTmp.getY(),enemyTmp.getSize(),enemyTmp.getSpeed(),enemyTmp.getHealth(),enemyTmp.getMaxHealth(),enemyTmp.getMaxY());
                    let newIndex = newIndex + 1;
                }
            }
        }
        else {
            let enemies = null;
        }

        let index = 0;
        while(index < enemiesSize) {
            let enemyTmp = tmp[index];
            if(~(enemyTmp = null)) {
                do enemyTmp.dispose();
            }
            let index = index + 1;
        }
        if(~(tmp = null)) {
            do tmp.dispose();
        }
        let enemiesSize=newEnemyCounter;
        return;
    }
    method void initEnemy(){
        let enemiesSize=0;
        do transfer();
        return;
    }
    method void addElement(Enemy newEnemy) {
        var Array tmp;
        var int index;
        let tmp = enemies;
        let enemies = Array.new(enemiesSize + 1);
        let index = 0;
        while(index < enemiesSize) {
            let enemies[index] = tmp[index];
            let index = index + 1;
        }
        let enemies[index] = newEnemy;
        if(~(tmp = null)) {
            do tmp.dispose();
        }
        let enemiesSize = enemiesSize + 1;
        return;
    }
    method void generateEnemy(int size,int speed,int level){
        var Enemy newEnemy;
        var int cnt,i,j,nx,now;
        var boolean complete;
        var Array arr;
        do Rand.setSeed(Rand.rand());
        let cnt=Rand.randRange(2)+1;
        let arr=Array.new(3);
        let i=0;
        while(i<cnt){
            let j=0;
            let complete=true;
            while(complete){
                let j=0;
                let nx=Rand.randRange(width-20-size)+20+x;
                let complete=true;
                while((j<i) & complete){
                    let complete=true;
                    let now=arr[j];
                    if( ((x-now)<size-1) & ((now-x)<size-1)){
                        let complete=false;
                    }
                    
                    let j=j+1;
                }
                let complete=false;
            }
            let arr[i]=nx;
            let newEnemy=Enemy.new(nx,3,size,speed,level,level,line);
            do newEnemy.draw();
            do addElement(newEnemy);
            let i=i+1;
        }
        
        //do Sys.halt();
        do arr.dispose();
        return;
    }
    method void judge(Array bullets,int bulletsSize){
        var int bulletIndex,enemyIndex,status;
        var Bullet bullet;
        var Enemy enemy;
        let dhealth=0;
        let dscore=0;
        let enemyIndex=0;
        while(enemyIndex<enemiesSize){
            let enemy=enemies[enemyIndex];
            let status=-1;
            let bulletIndex=0;
            if(bulletsSize=0){
                let bullet=Bullet.new(310,50,0,0);
                let status=enemy.judge(bullet);
                if(status=1){
                    let dhealth=dhealth+1;
                    do enemy.dispose();
                    let enemies[enemyIndex]=null;
                }
                do bullet.dispose();
            }
            else{
                while((~(status=1|status=3)) & (bulletIndex < bulletsSize)){
                    let bullet = bullets[bulletIndex];
                    if(~(bullet=null)){
                        let status=enemy.judge(bullet);
                        if(status=1){
                            let dhealth=dhealth+1;
                            do enemy.dispose();
                            let enemies[enemyIndex]=null;
                        }
                        if(status=3){
                            let dscore=dscore+1;
                            do enemy.dispose();
                            let enemies[enemyIndex]=null;
                        }
                    }
                    let bulletIndex = bulletIndex + 1;
                }
            }
            let enemyIndex=enemyIndex+1;
        }
        do draw();
        do transfer();
        return;
    }
    method boolean willCrash(Bullet bullet) {
        var int index;
        var Enemy enemy;
        let index = 0;
        while(index < enemiesSize) {
            let enemy = enemies[index];
            if(enemy.isCrash(bullet)) {
                return true;
            }
            let index = index + 1;
        }
        return false;
    }
    method void moveEnemy(){
        var int enemyIndex;
        var Enemy enemy;
        let enemyIndex=0;
        while(enemyIndex<enemiesSize){
            let enemy=enemies[enemyIndex];
            do enemy.move();
            let enemyIndex=enemyIndex+1;
        }
        return;
    }
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    method int getDhealth(){
        return dhealth;
    }
    method int getDscore(){
        return dscore;
    }
}
